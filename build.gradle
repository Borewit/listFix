// For Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {

        // https://gitlab.com/svg2ico/svg2ico-gradle-plugin
        classpath('gradle.plugin.com.gitlab.svg2ico:svg2ico-gradle-plugin:0.14') {
            exclude module: 'commons-io'
        }

    }
    // force to use commons-io:2.11.0 instead of svg2ico-gradle-plugin transitive commons-io (which not includes org.apache.commons.io.FileUtils.copyInputStreamToFile method)
    configurations.classpath {
        resolutionStrategy {
            force 'commons-io:commons-io:2.18.0'
        }
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'

    id 'checkstyle'

    // https://github.com/qoomon/gradle-git-versioning-plugin
    id 'me.qoomon.git-versioning' version '6.4.4'

    id 'org.beryx.jlink' version '3.1.1'
    id 'org.gradlex.extra-java-module-info' version '1.9'
}

apply plugin: 'com.gitlab.svg2ico'

gitVersioning.apply {
    refs {
        considerTagsOnBranches = true
        tag('v(?<version>.*)') {
            version = '${ref.version}'
        }
        branch('.+') {
            version = '${describe.tag.version}-${describe.distance}-g${commit.short}'
        }
    }

    rev {
        version = '${commit}'
    }
}

sourceCompatibility = 15
targetCompatibility = 15

project.mainClassName = 'listfix.view.GUIScreen'

def manifestAttributes = [
    'Implementation-Title'  : project.applicationName,
    'Implementation-Version': project.version,
    'Implementation-Vendor' : 'Borewit',
    'SCM-Repository'        : 'https://github.com/Borewit/listFix',
    'Main-Class'            : project.mainClassName
]

def cleanVersion = project.version.substring(0, project.version.indexOf("-") == -1 ? project.version.length() : project.version.indexOf("-"))

def jpackageName = 'listFix';

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url "https://repo1.maven.org/maven2/"
    }
    mavenLocal()
    // Staging repository
    maven { url 'https://s01.oss.sonatype.org/content/groups/staging/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {

    // Provides christophedelory.playlist.*
    implementation 'io.github.borewit:lizzy:4.1.1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'

    implementation 'jakarta.activation:jakarta.activation-api:2.1.3';

    // Required for log4j yaml configuration files
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.2'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.18.0'

    // Provide JFontChooser
    implementation 'com.rover12421.opensource:JFontChooser:1.0.5-3'

    // JUnit Jupiter using Gradle's native JUnit Platform
    testImplementation platform('org.junit:junit-bom:5.11.4')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.platform:junit-platform-reporting'
}

application {
    mainModule = 'listFix.app'
    // Define the main class for the application.
    mainClass = project.mainClassName
}

jar {
    manifest {
        attributes(manifestAttributes)
    }
}

// Convert legacy dependency to named Java module
extraJavaModuleInfo {
    module('com.rover12421.opensource:JFontChooser', 'say.swing.JFontChooser') {
        requires('java.desktop');
        exports('say.swing')
    }
    module('org.objenesis:objenesis', 'org.objenesis') {
        exports('org.objenesis')
    }
    module('org.mockito:mockito-core', 'org.mockito.core') {
        exports('org.mockito.verification')
    }
    module('com.jcabi:jcabi-log', 'com.jcabi.log') {
        exports('com.jcabi.log')
    }
    module('com.jcabi:jcabi-manifests', 'com.jcabi.manifests') {
        //requires('com.jcabi.log')
        exports('com.jcabi.manifests')
    }
    module('com.googlecode.plist:dd-plist', 'dd.plist') {
        exports('com.dd.plist')
        requires('java.xml')
    }
}

def generatedDir = "$buildDir/generated"
def generatedSources = "$generatedDir/sources"
def generatedResources = "$generatedDir/resources"
def generatedImages = "$generatedResources/images"
def pathFavicon = "$generatedDir/images/favicon.ico"
def pathPngIcon = "${generatedImages}/icon.png"
def pathSvgLogo = "${generatedImages}/listFix() logo.svg"

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', generatedResources]
        }
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = jpackageName
        noConsole = true
        jvmArgs = ['-Dlog4j.configurationFile=./log4j2.xml']
    }
    forceMerge 'jackson', 'log4j', 'log4j-core', 'slf4j', 'com.jcabi.log'

    jpackage {
        jvmArgs = ['-splash:images/listfixSplashScreen.png']
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        icon = currentOs.windows ? pathFavicon : pathPngIcon
        description = 'Fix and repairs broken playlist'
        // imageOptions += ['--win-console']
        imageOptions += ['--app-version', cleanVersion]
        installerOptions += [
                '--vendor', project.vendor,
                '--app-version', cleanVersion
        ]
        if (currentOs.windows) {
            installerOptions += [
                    '--win-upgrade-uuid', project.windowsUpgradeUuid,
                    '--install-dir', 'listFix',
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu'
            ]
        } else if (currentOs.unix) {
            installerOptions += [
                    '--install-dir', '/opt/listfix',
                    '--linux-package-name', 'listfix',
                    '--linux-rpm-license-type', 'MIT'
            ]
        }
    }

    mergedModule {
        additive = true
        uses "org.apache.logging.log4j.spi.Provider"
        uses "org.apache.logging.log4j.core.util.WatchEventService"
        uses "org.apache.logging.log4j.core.util.ContextDataProvider"
    }
}

task windowsPortableFolder(type: Copy, dependsOn: jpackage) {
    group = 'distribution'
    from "${buildDir}/jpackage/${jpackageName}"
    into "${buildDir}/distributions/portable/listFix-${project.version}"
}

task fatJar(type: Jar) {
    group = 'distribution'
    manifest {
        attributes(manifestAttributes)
    }
    setDuplicatesStrategy(DuplicatesStrategy.WARN)
    archiveBaseName = 'listFix'
    archiveVersion = project.version
    archiveClassifier = 'all'
    from { configurations.runtimeClasspath.filter { it.exists() }.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task makePngIcon(type: Svg2PngTask) {
    group = 'graphics'
    source = new File('src/main/svg/listFix() icon.svg')
    width = 64
    height = 64
    destination = new File(pathPngIcon)
}

tasks.processResources.dependsOn makePngIcon

task generateSplashScreenWithVersion(type: Copy) {
    group = 'graphics'
    from 'src/main/svg/listFix() logo.svg'
    into generatedImages
    filter(ReplaceTokens, tokens: [VERSION: project.version])
}

task makeSplashScreen(type: Svg2PngTask, dependsOn: generateSplashScreenWithVersion) {
    group = 'graphics'
    source = new File(pathSvgLogo)
    width = 400
    height = 160
    destination = new File("$generatedImages/listfixSplashScreen.png")
}

tasks.processResources.dependsOn makeSplashScreen

task makeIcon (type: Svg2IcoTask) {
    group = 'graphics'
    input {
        source = file('src/main/svg/listFix() icon.svg')
    }
    destination = file(pathFavicon)
}

tasks.processResources.dependsOn makeIcon

tasks.withType(Checkstyle).configureEach {
    exclude 'listfix/model/playlists/winamp/generated/**.java'
}

task checkStyle(type: DefaultTask, dependsOn: [checkstyleMain, checkstyleTest]) {
    group = 'verification'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

applicationDefaultJvmArgs = ['--add-exports=java.desktop/com.sun.java.swing.plaf.windows=ALL-UNNAMED',
                             '--add-exports=java.desktop/sun.awt.shell=ALL-UNNAMED'
]
