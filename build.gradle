//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {

        // https://github.com/fvarrui/JavaPackager
        classpath 'io.github.fvarrui:javapackager:1.6.7'

        // https://gitlab.com/svg2ico/svg2ico-gradle-plugin
        classpath('gradle.plugin.com.gitlab.svg2ico:svg2ico-gradle-plugin:0.11') {
            exclude module: 'commons-io'
        }

    }
    // force to use commons-io:2.11.0 instead of svg2ico-gradle-plugin transitive commons-io (which not includes org.apache.commons.io.FileUtils.copyInputStreamToFile method)
    configurations.classpath {
        resolutionStrategy {
            force 'commons-io:commons-io:2.11.0'
        }
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'

    /* https://github.com/openjfx/javafx-gradle-plugin */
    id 'org.openjfx.javafxplugin' version '0.0.10'

    /* Generate Java code from XSD */
    id 'org.unbroken-dome.xjc' version '2.0.0'

    id 'checkstyle'

    // https://github.com/qoomon/gradle-git-versioning-plugin
    id 'me.qoomon.git-versioning' version '6.3.6'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'
apply plugin: 'com.gitlab.svg2ico'

gitVersioning.apply {
    refs {
        considerTagsOnBranches = true
        tag('v(?<version>.*)') {
            version = '${ref.version}'
        }
        branch('.+') {
            version = '${describe.tag.version}-${describe.distance}'
        }
    }

    rev {
        version = '${commit}'
    }
}

sourceCompatibility = 15
targetCompatibility = 15

javafx {
    version = '17.0.1'
    modules = ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.swing']
    configuration = 'implementation'
}

project.mainClassName = 'listfix.view.GUIScreen'

def manifestAttributes = [
    'Implementation-Title'  : project.applicationName,
    'Implementation-Version': project.version,
    'Implementation-Vendor' : 'Borewit',
    'SCM-Repository'        : 'https://github.com/Borewit/listFix',
    'Main-Class'            : project.mainClassName
]

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    implementation files('src/lib/net.mariottini.swing.jar')

    // Provides christophedelory.playlist.*
    implementation files('src/lib/lizzy.jar')

    // https://mvnrepository.com/artifact/com.jgoodies/jgoodies-common
    implementation 'com.jgoodies:jgoodies-common:1.8.0'

    // https://mvnrepository.com/artifact/com.jgoodies/jgoodies-looks
    implementation 'com.jgoodies:jgoodies-looks:2.7.0'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'

    // Apache SLF4J to Log4j2 Adapter (bridge)
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.19.0'

    // Required for log4j yaml configuration files
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.11.0'

    // Used to read the version number from the manifest
    // https://mvnrepository.com/artifact/com.jcabi/jcabi-manifests/1.2.1
    implementation 'com.jcabi:jcabi-manifests:1.2.1'

    // Required by "src/jar/lizzy.jar"
    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    runtimeOnly 'commons-logging:commons-logging:1.2'

    // Required by "src/jar/lizzy.jar"
    // https://mvnrepository.com/artifact/org.codehaus.castor/castor-xml
    implementation 'org.codehaus.castor:castor-xml:1.4.1'

    // JUnit Jupiter using Gradle's native JUnit Platform
    testImplementation(platform('org.junit:junit-bom:5.9.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

application {
    // Define the main class for the application.
    mainClass = project.mainClassName
}

jar {
    manifest {
        attributes(manifestAttributes)
    }
}

def generatedDir = "$buildDir/generated"
def generatedSources = "$generatedDir/sources"
def generatedResources = "$generatedDir/resources"
def generatedImages = "$generatedResources/images"

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "$generatedSources/xjc/java/main"]
        }
        resources {
            srcDirs = ['src/main/resources', generatedResources]
        }
    }
}

task fatJar(type: Jar) {
    group = 'distribution'
    manifest {
        attributes(manifestAttributes)
    }
    setDuplicatesStrategy(DuplicatesStrategy.WARN)
    archiveBaseName = 'listFix'
    archiveClassifier = 'all'
    from { configurations.compileClasspath.filter { it.exists() }.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task makePngIcon(type: Svg2PngTask) {
    group = 'graphics'
    source = new File('src/main/svg/listFix() icon.svg')
    width = 64
    height = 64
    destination = new File("$generatedImages/icon.png")
}

tasks.processResources.dependsOn makePngIcon

task generateSplashScreenWithVersion(type: Copy) {
    group = 'graphics'
    from 'src/main/svg/listFix() logo.svg'
    into "$buildDir/generated-src"
    filter(ReplaceTokens, tokens: [VERSION: project.version])
}

task makeSplashScreen(type: Svg2PngTask, dependsOn: generateSplashScreenWithVersion) {
    group = 'graphics'
    source = new File("$buildDir/generated-src/listFix() logo.svg")
    width = 400
    height = 160
    destination = new File("$generatedImages/listfixSplashScreen.png")
}

tasks.processResources.dependsOn makeSplashScreen

task makeIcon (type: Svg2IcoTask) {
    group = 'graphics'
    input {
        source = file('src/main/svg/listFix() icon.svg')
    }
    destination = file('website/favicon.ico')
}

tasks.withType(JavaCompile).configureEach {
    compileTask -> compileTask.dependsOn xjcGenerate
}

tasks.withType(Checkstyle).configureEach {
    exclude 'listfix/model/playlists/winamp/generated/**.java'
}

task checkStyle(type: DefaultTask, dependsOn: [checkstyleMain, checkstyleTest]) {
    group = 'verification'
}

task packageMyApp(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: [makeIcon, fatJar]) {
    // mandatory
    mainClass = project.mainClassName
    runnableJar = file("build/libs/${project.name}-${project.version}-all.jar")
    // optional
    bundleJre = true
    generateInstaller = true
    administratorRequired = false
    platform = 'windows'
    licenseFile = file('LICENSE.txt')
    copyDependencies = false
    customizedJre = false
    winConfig {
        headerType = 'gui'
        icoFile = file("${projectDir}/website/favicon.ico")
    }
    description = 'Repairs Missing Entries in Playlist Files'
    organizationName = 'Borewit'
    organizationUrl = 'https://github.com/Borewit'
    url = 'https://github.com/Borewit/listFix'
}

applicationDefaultJvmArgs = ['--add-exports=java.desktop/com.sun.java.swing.plaf.windows=ALL-UNNAMED',
                             '--add-exports=java.desktop/sun.awt.shell=ALL-UNNAMED'
]
