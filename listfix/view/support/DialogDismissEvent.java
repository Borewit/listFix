/* ----------------------------------------------------------------------------
   The Kiwi Toolkit
   Copyright (C) 1998-2001 Mark A. Lindner

   This file is part of Kiwi.
   
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the Free
   Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
   The author may be contacted at:
   
   mark_a_lindner@yahoo.com
   ----------------------------------------------------------------------------
   $Log: DialogDismissEvent.java,v $
   Revision 1.4  2001/03/12 05:56:36  markl
   Javadoc cleanup.

   Revision 1.3  2001/03/12 01:38:46  markl
   Source code cleanup.

   Revision 1.2  1999/01/10 03:26:20  markl
   added GPL header & RCS tag
   ----------------------------------------------------------------------------
*/

package listfix.view.support;

import java.awt.Dialog;

/** Event generated by one of the Kiwi dialog classes when it has been
  * dismissed via an <i>OK</i> or <i>Cancel</i> button. The event object
  * stores the type of dismissal.
  *
  * @see kiwi.event.DialogDismissListener
  *
  * @author Mark Lindner
  * @author PING Software Group
  */

public class DialogDismissEvent
  {
  /** Dismissal type; the <i>Cancel</i> button was pressed. */
  public static final int CANCEL = 0;

  /** Dismissal type; the <i>OK</i> button was pressed. */
  public static final int OK = 1;

  private int type;
  private Object obj;
  private Dialog source;

  /** Construct a new <code>DialogDismissEvent</code>.
    *
    * @param source The dialog that is the source of this event.
    * @param type The dismissal type; one of the numeric constants defined
    * above.
    */

  public DialogDismissEvent(Dialog source, int type)
    {
    this(source, type, null);
    }

  /** Construct a new <code>DialogDismissEvent</code>.
    *
    * @param source The dialog that is the source of this event.
    * @param type The dismissal type; one of the numeric constants defined
    * above.
    * @param userObject An arbitrary user object to associate with this event.
    */

  public DialogDismissEvent(Dialog source, int type, Object userObject)
    {
    this.source = source;
    this.type = type;
    this.obj = userObject;
    }

  /** Get the source of this event.
    *
    * @return the <code>Dialog</code> that generated this event.
    */

  public Dialog getSource()
    {
    return(source);
    }

  /** Get the user object associated with this event.
    *
    * @return The user object associated with this event, or <code>null</code>
    * if none was associated.
    */

  public Object getUserObject()
    {
    return(obj);
    }

  /** Determine if the dialog was cancelled.
    *
    * @return <code>true</code> if the dialog was dismissed via the
    * <i>Cancel</i> button; equivalent to <code>getType() ==
    * CANCEL</code>.
    */

  public boolean isCancelled()
    {
    return(type == CANCEL);
    }

  /** Get the dismissal type.
    *
    * @return The dismissal type; one of the numeric constants defined above.
    */

  public int getType()
    {
    return(type);
    }
  
  }