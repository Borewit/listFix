package listfix.view.dialogs;

import java.awt.*;
import java.util.List;
import javax.swing.*;
import javax.swing.table.TableCellEditor;
import listfix.model.BatchMatchItem;
import listfix.view.controls.ClosestMatchesSearchScrollableResultsPanel;

/**
 * This is the results dialog we display when running a closest matches search on multiple files in
 * a playlist (this operation originally worked only on a single entry)..
 */
public class BatchClosestMatchResultsDialog extends JDialog {
  private final List<BatchMatchItem> _items;

  public BatchClosestMatchResultsDialog(Frame parent, List<BatchMatchItem> items) {
    super(parent, true);
    this._items = items;
    initComponents();

    // get screenwidth using workaround for vmware/linux bug
    int screenWidth;
    DisplayMode dmode = getGraphicsConfiguration().getDevice().getDisplayMode();
    if (dmode != null) {
      screenWidth = dmode.getWidth();
    } else {
      screenWidth = getGraphicsConfiguration().getBounds().width;
    }
    int newWidth = _pnlResults.getTableWidth() + getWidth() - _pnlResults.getWidth() + 2;
    setSize(Math.min(newWidth, screenWidth - 50), getHeight());
  }

  public boolean isAccepted() {
    return _isAccepted;
  }

  private boolean _isAccepted;

  public List<BatchMatchItem> getMatches() {
    return _items;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  private void initComponents() {

    JPanel jPanel1 = new JPanel();
    JButton _btnOk = new JButton();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton _btnCancel = new JButton();
    _pnlResults = new ClosestMatchesSearchScrollableResultsPanel(_items);

    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Select Closest Matches");

    jPanel1.setLayout(new FlowLayout(FlowLayout.RIGHT));

    _btnOk.setText("OK");
    _btnOk.addActionListener(evt -> onBtnOkActionPerformed());
    jPanel1.add(_btnOk);

    _btnCancel.setText("Cancel");
    _btnCancel.addActionListener(evt -> onBtnCancelActionPerformed());
    jPanel1.add(_btnCancel);

    getContentPane().add(jPanel1, BorderLayout.SOUTH);
    getContentPane().add(_pnlResults, BorderLayout.CENTER);

    pack();
  }

  private void onBtnOkActionPerformed() {
    _isAccepted = true;
    if (_pnlResults.getSelectedRow() > -1 && _pnlResults.getSelectedColumn() == 3) {
      TableCellEditor cellEditor =
          _pnlResults.getCellEditor(_pnlResults.getSelectedRow(), _pnlResults.getSelectedColumn());
      cellEditor.stopCellEditing();
    }
    setVisible(false);
  }

  private void onBtnCancelActionPerformed() {
    _isAccepted = false;
    setVisible(false);
  }

  private ClosestMatchesSearchScrollableResultsPanel _pnlResults;
}
