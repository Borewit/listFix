

/*
 * PlaylistsList.java
 *
 * Created on Apr 2, 2011, 12:11:40 PM
 */

package listfix.view.controls;

import listfix.model.BatchRepair;
import listfix.model.playlists.Playlist;
import listfix.view.dialogs.PlaylistsTableModel;
import listfix.view.support.ZebraJTable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;


public class PlaylistsList extends JPanel
{
  private BatchRepair _batch;

  private static final Logger _logger = LogManager.getLogger(PlaylistsList.class);

  /**
   * Creates new form PlaylistsList
   */
  public PlaylistsList()
  {
    initComponents();
  }


  public PlaylistsList(BatchRepair batch)
  {
    _batch = batch;
    initComponents();

    _uiLists.setShowHorizontalLines(false);
    _uiLists.setShowVerticalLines(false);

    _uiLists.initFillColumnForScrollPane(_uiScrollLists);

    // selections
    _uiLists.setColumnSelectionAllowed(false);
    _uiLists.setCellSelectionEnabled(false);
    _uiLists.setRowSelectionAllowed(true);
  }

  private ZebraJTable createTable()
  {
    return new ZebraJTable()
    {
      @Override
      public String getToolTipText(MouseEvent event)
      {
        Point point = event.getPoint();
        int rawRowIx = rowAtPoint(point);
        int rawColIx = columnAtPoint(point);
        if (rawRowIx >= 0 && rawColIx >= 0)
        {
          int rowIx = convertRowIndexToModel(rawRowIx);
          int colIx = convertColumnIndexToModel(rawColIx);
          if (rowIx >= 0 && rowIx < _batch.getItems().size() && (colIx == 1))
          {
            return _batch.getItem(rowIx).getPath();
          }
        }
        return super.getToolTipText(event);
      }
    };
  }


  public void initPlaylistsList()
  {
    resizeAllColumns();

    // sort playlists by filename
    RowSorter<? extends TableModel> sorter = _uiLists.getRowSorter();
    List<RowSorter.SortKey> keys = new ArrayList<>();
    keys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
    sorter.setSortKeys(keys);
  }

  private void resizeAllColumns()
  {
    // resize columns to fit

    _uiLists.autoResizeColumn(0, true);
    _uiLists.autoResizeColumn(1, false, 160);
    TableColumnModel cm = _uiLists.getColumnModel();
    TableCellRenderer renderer = _uiLists.getDefaultRenderer(Integer.class);
    Component comp = renderer.getTableCellRendererComponent(_uiLists, (_uiLists.getRowCount() + 1) * 10, false, false, 0, 0);
    int width = comp.getPreferredSize().width;
    TableColumn col = cm.getColumn(0);
    col.setMinWidth(width);
    col.setMaxWidth(width);
    col.setPreferredWidth(width);

  }


  public ListSelectionModel getSelectionModel()
  {
    return _uiLists.getSelectionModel();
  }


  public int getSelectedModelRow()
  {
    return _uiLists.getSelectedRow() < 0 ? -1 : _uiLists.convertRowIndexToModel(_uiLists.getSelectedRow());
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    GridBagConstraints gridBagConstraints;

    jPanel5 = new JPanel();
    jLabel2 = new JLabel();
    _labListCount = new JLabel();
    _uiScrollLists = new JScrollPane();
    _uiLists = createTable();

    setLayout(new BorderLayout());

    jPanel5.setLayout(new GridBagLayout());

    jLabel2.setText("Playlists");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new Insets(5, 5, 5, 0);
    jPanel5.add(jLabel2, gridBagConstraints);

    _labListCount.setForeground(UIManager.getDefaults().getColor("controlShadow"));
    _labListCount.setHorizontalAlignment(SwingConstants.RIGHT);
    _labListCount.setText("0 lists");
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new Insets(5, 0, 5, 5);
    jPanel5.add(_labListCount, gridBagConstraints);

    add(jPanel5, BorderLayout.PAGE_START);

    _uiScrollLists.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));

    _uiLists.setAutoCreateRowSorter(true);
    _uiLists.setModel(new PlaylistsTableModel(_batch));
    _uiLists.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    _uiLists.setRowHeight(20);
    _uiLists.getTableHeader().setReorderingAllowed(false);
    _uiScrollLists.setViewportView(_uiLists);

    add(_uiScrollLists, BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JLabel _labListCount;
  private ZebraJTable _uiLists;
  private JScrollPane _uiScrollLists;
  private JLabel jLabel2;
  private JPanel jPanel5;
  // End of variables declaration//GEN-END:variables


  public void setText(String listCountTxt)
  {
    _labListCount.setText(listCountTxt);
  }


  public void playlistModified(Playlist list)
  {
    int uiIndex = _uiLists.getSelectedRow();
    int selIx = _uiLists.getSelectedRow();
    if (selIx >= 0)
    {
      selIx = _uiLists.convertRowIndexToModel(selIx);

      try
      {
        ((PlaylistsTableModel) _uiLists.getModel()).fireTableDataChanged();
      }
      catch (Exception e)
      {
        _logger.warn(e);
      }
      _uiLists.setRowSelectionInterval(uiIndex, uiIndex);
    }
  }


  public void anchorLeft()
  {
    _uiScrollLists.getHorizontalScrollBar().setValue(0);
  }
}
