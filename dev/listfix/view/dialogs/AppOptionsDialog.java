/*
 * listFix() - Fix Broken Playlists!
 * Copyright (C) 2001-2010 Jeremy Caron
 * 
 * This file is part of listFix().
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, please see http://www.gnu.org/licenses/
 */

package listfix.view.dialogs;

/**
 *
 * @author  jcaron
 */
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

import listfix.model.AppOptions;
import listfix.view.support.FontHelper;
import net.mariottini.swing.JFontChooser;

public class AppOptionsDialog extends javax.swing.JDialog
{
	private static final long serialVersionUID = 3409894354485158935L;
	public static final int OK = 0;
	public static final int CANCEL = 1;
	private int resultCode;
	private String fileName;
	private AppOptions options = null;
	private final JFileChooser jMediaDirChooser = new JFileChooser();
	private Font chosenFont = null;

	/** Creates new form EditFilenameDialog */
	public AppOptionsDialog(java.awt.Frame parent, String title, boolean modal, AppOptions opts)
	{
		super(parent, title, modal);
		if (opts == null)
		{
			options = new AppOptions();
		}
		else
		{
			options = opts;
		}
		initComponents();
		jMediaDirChooser.setDialogTitle("Specify a playlists directory...");
		jMediaDirChooser.setAcceptAllFileFilterUsed(false);
		jMediaDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chosenFont = opts.getAppFont();
		FontHelper.recursiveSetFont(jMediaDirChooser.getComponents(), chosenFont);
		_fontDisplayLabel.setText(formatFont());
	}

	public AppOptionsDialog()
	{
	}

	public String getFileName()
	{
		return fileName;
	}

	public void setFileName(String x)
	{
		fileName = x;
	}

	public void setResultCode(int i)
	{
		resultCode = i;
	}

	public int getResultCode()
	{
		return resultCode;
	}

	private String formatFont()
	{
		return chosenFont.getFamily() + ", " + FontHelper.getStyle(chosenFont) + ", " + chosenFont.getSize();
	}

	private LookAndFeelInfo[] getInstalledLookAndFeels()
	{
		LookAndFeelInfo[] plafs = UIManager.getInstalledLookAndFeels();
		List<LookAndFeelInfo> lafs = new ArrayList<LookAndFeelInfo>();
		for (LookAndFeelInfo laf : plafs)
		{
			if (!laf.getName().toLowerCase().contains("nimbus"))
			{
				lafs.add(laf);
			}
		}
		plafs = lafs.toArray(new LookAndFeelInfo[0]);
		return plafs;
	}

	private DefaultComboBoxModel getLookAndFeelMenuItems()
	{
		LookAndFeelInfo[] plafs = getInstalledLookAndFeels();

		String[] model = new String[plafs.length];
		for (int i = 0; i < plafs.length; i++)
		{
			model[i] = plafs[i].getName();
		}
		return new DefaultComboBoxModel(model);
	}

	private LookAndFeelInfo getInstalledLookAndFeelAtIndex(int index)
	{
		UIManager.LookAndFeelInfo[] plafs = getInstalledLookAndFeels();
		if (index < plafs.length)
		{
			return plafs[index];
		}
		return plafs[0];
	}

	private LookAndFeelInfo getInstalledLookAndFeelByClassName(String name)
	{
		UIManager.LookAndFeelInfo[] plafs = getInstalledLookAndFeels();
		for (int i = 0; i < plafs.length; i++)
		{
			if (name.equals(plafs[i].getClassName()))
			{
				return plafs[i];
			}
		}
		return plafs[0];
	}

	private void center()
	{
		Point parentLocation = this.getParent().getLocationOnScreen();
		double x = parentLocation.getX();
		double y = parentLocation.getY();
		int width = this.getParent().getWidth();
		int height = this.getParent().getHeight();

		this.setLocation((int) x + (width - this.getPreferredSize().width) / 2, (int) y + (height - this.getPreferredSize().height) / 2);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPanel = new javax.swing.JPanel();
        optionsPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        recentPlaylistLimitComboBox = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lookAndFeelComboBox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        autoLocateCheckBox = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        relativePathsCheckBox = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        autoRefreshOnStartupCheckBox = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        alwaysUseUNCPathsCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        _fontDisplayLabel = new javax.swing.JLabel();
        _changeFontButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        playlistDirectoryTextField = new javax.swing.JTextField();
        playlistDirectoryBrowseButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setMinimumSize(null);
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        topPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        topPanel.setMinimumSize(null);
        topPanel.setPreferredSize(null);
        topPanel.setLayout(new javax.swing.BoxLayout(topPanel, javax.swing.BoxLayout.Y_AXIS));

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General Config"));
        optionsPanel.setLayout(new java.awt.GridBagLayout());

        jPanel3.setMinimumSize(null);
        jPanel3.setPreferredSize(null);
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel1.setText("Recent Playlist Limit: ");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setMinimumSize(new java.awt.Dimension(111, 9));
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel3.add(jLabel1);

        recentPlaylistLimitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        recentPlaylistLimitComboBox.setSelectedItem("" + options.getMaxPlaylistHistoryEntries());
        recentPlaylistLimitComboBox.setPreferredSize(new java.awt.Dimension(50, 20));
        jPanel3.add(recentPlaylistLimitComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel3, gridBagConstraints);

        jPanel8.setMinimumSize(null);
        jPanel8.setPreferredSize(null);
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel5.setText("Look and Feel:");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel5.setMinimumSize(new java.awt.Dimension(111, 9));
        jLabel5.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel8.add(jLabel5);

        lookAndFeelComboBox.setModel(this.getLookAndFeelMenuItems());
        lookAndFeelComboBox.setSelectedItem(this.getInstalledLookAndFeelByClassName(options.getLookAndFeel()).getName());
        lookAndFeelComboBox.setPreferredSize(new java.awt.Dimension(120, 20));
        jPanel8.add(lookAndFeelComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel8, gridBagConstraints);

        jPanel4.setMinimumSize(null);
        jPanel4.setPreferredSize(null);
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel2.setText("Auto-locate missing playlist entries on load:");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel2.setMinimumSize(new java.awt.Dimension(111, 9));
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel4.add(jLabel2);

        autoLocateCheckBox.setSelected(options.getAutoLocateEntriesOnPlaylistLoad());
        jPanel4.add(autoLocateCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel4, gridBagConstraints);

        jPanel5.setMinimumSize(new java.awt.Dimension(165, 20));
        jPanel5.setPreferredSize(null);
        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel3.setText("Save playlists with relative file references:");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel3.setMinimumSize(new java.awt.Dimension(111, 9));
        jLabel3.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel5.add(jLabel3);

        relativePathsCheckBox.setSelected(options.getSavePlaylistsWithRelativePaths());
        jPanel5.add(relativePathsCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel5, gridBagConstraints);

        jPanel7.setMinimumSize(new java.awt.Dimension(165, 20));
        jPanel7.setPreferredSize(null);
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel4.setText("Auto refresh media library at startup:");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setMinimumSize(new java.awt.Dimension(111, 9));
        jLabel4.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel7.add(jLabel4);

        autoRefreshOnStartupCheckBox.setSelected(options.getAutoRefreshMediaLibraryOnStartup());
        jPanel7.add(autoRefreshOnStartupCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel7, gridBagConstraints);

        jPanel9.setMinimumSize(new java.awt.Dimension(165, 20));
        jPanel9.setPreferredSize(null);
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel6.setText("Media library uses UNC paths for directories on mapped drives:");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel6.setMinimumSize(new java.awt.Dimension(111, 9));
        jLabel6.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel9.add(jLabel6);

        alwaysUseUNCPathsCheckBox.setSelected(options.getAlwaysUseUNCPaths());
        jPanel9.add(alwaysUseUNCPathsCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel9, gridBagConstraints);

        jPanel1.setMinimumSize(null);
        jPanel1.setPreferredSize(null);
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel8.setText("Font:");
        jPanel1.add(jLabel8);

        _fontDisplayLabel.setText("SansSerif, Plain, 10");
        jPanel1.add(_fontDisplayLabel);

        _changeFontButton.setText("...");
        _changeFontButton.setAlignmentY(0.0F);
        _changeFontButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        _changeFontButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _changeFontButtonActionPerformed(evt);
            }
        });
        jPanel1.add(_changeFontButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel2, gridBagConstraints);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 8, 0));

        jLabel7.setText("Playlists Directory:");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel7.setMinimumSize(new java.awt.Dimension(111, 9));
        jLabel7.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel6.add(jLabel7);

        playlistDirectoryTextField.setText(options.getPlaylistsDirectory());
        playlistDirectoryTextField.setAlignmentX(0.0F);
        playlistDirectoryTextField.setAlignmentY(0.0F);
        playlistDirectoryTextField.setMaximumSize(null);
        playlistDirectoryTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        playlistDirectoryTextField.setRequestFocusEnabled(false);
        jPanel6.add(playlistDirectoryTextField);

        playlistDirectoryBrowseButton.setText("...");
        playlistDirectoryBrowseButton.setAlignmentY(0.0F);
        playlistDirectoryBrowseButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        playlistDirectoryBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistDirectoryBrowseButtonActionPerformed(evt);
            }
        });
        jPanel6.add(playlistDirectoryBrowseButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        optionsPanel.add(jPanel6, gridBagConstraints);

        topPanel.add(optionsPanel);

        buttonPanel.setMaximumSize(null);
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButton1.setText("OK");
        jButton1.setMinimumSize(new java.awt.Dimension(49, 20));
        jButton1.setPreferredSize(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        buttonPanel.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.setMinimumSize(new java.awt.Dimension(67, 20));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        buttonPanel.add(jButton2);

        topPanel.add(buttonPanel);

        getContentPane().add(topPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		setVisible(false);
		dispose();
		setResultCode(CANCEL);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		setVisible(false);
		dispose();
		setResultCode(OK);
    }//GEN-LAST:event_jButton1ActionPerformed

	/** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		setVisible(false);
		dispose();
    }//GEN-LAST:event_closeDialog

	private void playlistDirectoryBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistDirectoryBrowseButtonActionPerformed
		int response = jMediaDirChooser.showOpenDialog(this);
		if (response == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				String path = jMediaDirChooser.getSelectedFile().getPath();
				if (new File(path).exists())
				{
					playlistDirectoryTextField.setText(path);
				}
				else
				{
					throw new FileNotFoundException();
				}
			}
			catch (Exception e)
			{
				JOptionPane.showMessageDialog(this, "The directory you selected/entered does not exist.");
				e.printStackTrace();
			}
		}
	}//GEN-LAST:event_playlistDirectoryBrowseButtonActionPerformed

	private void _changeFontButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event__changeFontButtonActionPerformed
	{//GEN-HEADEREND:event__changeFontButtonActionPerformed
		JFontChooser jfc = new JFontChooser();
		jfc.setSelectedFont(chosenFont);
		jfc.showDialog(this);
		chosenFont = jfc.getSelectedFont();
		_fontDisplayLabel.setText(formatFont());
	}//GEN-LAST:event__changeFontButtonActionPerformed

	public AppOptions showDialog()
	{
		this.center();
		this.setVisible(true);
		if (this.getResultCode() == OK)
		{
			options.setAutoLocateEntriesOnPlaylistLoad(autoLocateCheckBox.isSelected());
			options.setMaxPlaylistHistoryEntries(new Integer((String) recentPlaylistLimitComboBox.getItemAt(recentPlaylistLimitComboBox.getSelectedIndex())).intValue());
			options.setSavePlaylistsWithRelativePaths(relativePathsCheckBox.isSelected());
			options.setAutoRefreshMediaLibraryOnStartup(autoRefreshOnStartupCheckBox.isSelected());
			options.setLookAndFeel(this.getInstalledLookAndFeelAtIndex(lookAndFeelComboBox.getSelectedIndex()).getClassName());
			options.setAlwaysUseUNCPaths(this.alwaysUseUNCPathsCheckBox.isSelected());
			options.setPlaylistsDirectory(playlistDirectoryTextField.getText());
			options.setAppFont(chosenFont);
		}
		return options;
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _changeFontButton;
    private javax.swing.JLabel _fontDisplayLabel;
    private javax.swing.JCheckBox alwaysUseUNCPathsCheckBox;
    private javax.swing.JCheckBox autoLocateCheckBox;
    private javax.swing.JCheckBox autoRefreshOnStartupCheckBox;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JComboBox lookAndFeelComboBox;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton playlistDirectoryBrowseButton;
    private javax.swing.JTextField playlistDirectoryTextField;
    private javax.swing.JComboBox recentPlaylistLimitComboBox;
    private javax.swing.JCheckBox relativePathsCheckBox;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
